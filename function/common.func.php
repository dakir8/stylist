<?php
if(define('common', true))
exit('Access Denine');

function is_exists($path){
	if($path=='')
	return false;
	if(file_exists($path) || file_exists(REGION_DIR.$path))
	return true;
}
function object2array($object){
	$d = array();
	foreach($object as $k=>$v)
		$d[$k] = $v;
	return $d;
}
function json($statusCode, $value='', $html='', $other=array()){
	$arr = array();
	$arr['statusCode'] = $statusCode;
	$value!='' ? $arr['value']=$value : NULL;
	$html!='' ? ($arr['html']=$html) : NULL;
	foreach($other as $key=>$value)
	$arr[$key] = $value;
	
	if($html!='' && json_encode($html)=='null'){
		$arr['statusCode'] = 11;
		$arr['value'] = 'JSON_ENCODE_ERROR:'.json_last_error();
		return $arr;
	}
	return $arr;
}
function cutstr($str, $leng, $encode=''){
	if(strlen($str) > $leng && $encode){
		$temp_str = mb_substr($str, 0, $leng, $encode);
		if($temp_str == $str){ return $str; }
		return $temp_str . " ... ";
	}
	if(strlen($str) > $leng){
		$temp_str = substr($str, 0, $leng);
		if($temp_str == $str){ return $str; }
		return $temp_str . " ... ";
	}
	return $str;
}
function cutstr_wordnobreak($str, $leng){
	if(strlen($str) > $leng){
		$temp_str = '';
		$temp_a = explode(' ', $str);
		foreach($temp_a as $temp){
			$temp_str .= $temp . ' ';
			if(strlen($temp_str) >= $leng){ return $temp_str . ' ...'; }
		}
	}
	return $str;
}
function dateToTime($date){
	$d = explode('/',$date);
	return mktime(date('H'),date('i'),date('s'),$d[1],$d[2],$d[0]);
}
function datetimeToTimestamp_ymd($date, $delimiter='/'){
	$temp_a = explode(' ', $date);
	$temp_date_a = explode($delimiter, $temp_a[0]);
	if(!$temp_a[1]){
		$temp_a[1] = '0:0:0';
	}
	$temp_time_a = explode(':', $temp_a[1]);
	return mktime($temp_time_a[0], $temp_time_a[1], $temp_time_a[2], $temp_date_a[1], $temp_date_a[2], $temp_date_a[0]);
}
function dateformat($dformat,$odate,$delimiter='/'){
	if(strlen($odate) > 10){
		$a = explode(' ',$odate);
		$b = explode($delimiter,$a[0]);
		$timestamp = mktime(0,0,0,$b[1],$b[2],$b[0]);
		return date($dformat, $timestamp);
	}
	return date($dformat, strtotime($odate));
}
function datetimeformat_dmy($dformat, $odate, $delimiter='/', $AM=true){
	$temp_datetime = explode(' ',$odate);
	$temp_date = explode($delimiter, $temp_datetime[0]);
	$temp_time = explode(':', $temp_datetime[1]);
	$temp_am = ($AM && $temp_datetime[2] == 'PM') ? 12 : 0;
	$timestamp = mktime(($temp_time[0] + $temp_am), $temp_time[1], $temp_time[2], $temp_date[1], $temp_date[0], $temp_date[2]);
	return date($dformat, $timestamp);
}
function datetimeformat_mdy($dformat, $odate, $delimiter='/', $AM=true){
	$temp_datetime = explode(' ',$odate);
	$temp_date = explode($delimiter, $temp_datetime[0]);
	$temp_time = explode(':', $temp_datetime[1]);
	$temp_am = ($AM && $temp_datetime[2] == 'PM') ? 12 : 0;
	$timestamp = mktime(($temp_time[0] + $temp_am), $temp_time[1], $temp_time[2], $temp_date[1], $temp_date[2], $temp_date[0]);
	return date($dformat, $timestamp);
}
function print_array($array, $bgcolor='white', $color='black'){
	global $debugger;
	if($debugger){
		echo "<pre style='background-color: $bgcolor; border: 1px solid; padding: 5px; color: $color;'>";
		print_r($array);
		echo "</pre>";
	}
}
function print_json($array){
	global $debugger;
	if($debugger){
		echo json_encode($array);
	}
}
function startsWith($haystack, $needle){
    return strpos($haystack, $needle) === 0;
}
function endsWith($haystack, $needle){
    return substr($haystack, -strlen($needle)) == $needle;
}
function redirect($url,$perm=false){
	if($perm)
	header('HTTP/1.1 301 Moved Permanently');
	
	header("Location: ".$url);
	exit;
}
function nl2space($str){
	$str = str_replace('\r\n', ' ', $str);
	$str = str_replace('\n\r', ' ', $str);
	$str = str_replace('\r', ' ', $str);
	$str = str_replace('\n', ' ', $str);
	return $str;
}
function getTimer(){
	global $startms;
	$end = explode(' ', microtime());
	$end = $end[1] + $end[0];
	return $end - $startms;
}
function endMS(){
	$ms = getTimer();
	printf("Page was generated by PHP %s in %f sec(s)", phpversion(), $ms);
	return;
}
function template($tname, $inner=false){
	global $temp_space, $temped, $on_display, $debugger, $displayed;
	try{
		if(!$displayed && false){
			$r = include_once('include/on_display.inc.php');
			$GLOBALS['is_goooded'] = $r;
			
			$t = new Table();
			$t->destructit();
		}
		//print_array($r);
		//foreach($r as $k=>$ar)
		//$GLOBALS[$k] = $ar;

		$GLOBALS['displayed'] = true;
		$GLOBALS['temped']++;
		$re = str_replace('.' , '_' , $tname);
		$times = $GLOBALS['include_times'][$re];
		$times = !$times ? 1 : $times+1;
		$GLOBALS['include_times'][$re] = $GLOBALS['incTimes']=$times;
		if($tname){
			$tname = $temp_space!='' && !$inner ? $temp_space.'.'.$tname : $tname;
			$tnam = explode('.', $tname);
			$temp_name = $tname;
			$cache = 'cache/t_'.$tname.'.php';
			if(count($tnam) > 1){
				$temp_name = $tnam[0].'/'.$tnam[1];
				$cache = 'cache/'.$tnam[0].'/t_'.$tnam[1].'.php';
			}
		} else {
			$p = substr($_SERVER['PHP_SELF'],1);
			if(strpos($p, '/') !== false){
				$po = strpos($p,'/');
				$pp = substr($p, 0, $po+1);
			}
			$temp_name = basename($_SERVER['PHP_SELF'], '.php');
			$cache = 'cache/t_'.$temp_name.'.php';
		}
		$temp = 'template/'.$temp_name.'.htm';
		$dir = file_exists('./'.REGION_DIR.$temp) ? './'.REGION_DIR : './';
		$cach = $dir . $cache;
		if(!file_exists($dir.$temp)){
			throw new Exception('Template not found : '.$temp);
			return;
		}
		//echo filemtime($dir.$temp) .' , '. filemtime($cach);
		//echo $dir.$temp . '<br />' . $cach;
		if(file_exists($dir.$temp) && file_exists($cach) && (filemtime($dir.$temp) > filemtime($cach)))
			flush_cache($dir.'template/'.$temp_name,$cache,$dir);
		if(file_exists($dir.$temp) && !file_exists($cach))
			flush_cache($dir.'template/'.$temp_name,$cache,$dir);
			
		if($debugger)
		echo '<!-- template:'.$tname.' -->';
		return $cache;
	}catch(Exception $e){
		echo $e->getMessage();
	}
}
function flush_cache($path1, $path2='', $font=''){
	require_once 'function/template.func.php';
	$GLOBALS['font']=$font;
	$cac = new bstemp();
	$a = explode('/', dirname($path1));
	$dirnamis = $a[count($a)-1];
	$dirnamis = ($dirnamis == 'template') ? '' : $dirnamis.'/';
	//echo '<br />'.$path1.'<br />'.$dirnamis.'<br />';
	return $cac->cache($path1, false, '.htm', $dirnamis);
}